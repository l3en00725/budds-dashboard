import { NextRequest, NextResponse } from 'next/server';
import { createServiceRoleClient } from '@/lib/supabase';

export async function POST(request: NextRequest) {
  try {
    const supabase = createServiceRoleClient();
    
    // Create a test call event payload
    const testCallEvent = {
      object: {
        type: "call.completed",
        data: {
          object: {
            id: `test-call-${Date.now()}`,
            from: "+15551234567",
            to: "+15559876543",
            direction: "incoming",
            duration: 120,
            completedAt: new Date().toISOString(),
            createdAt: new Date().toISOString()
          }
        }
      }
    };

    console.log('Testing OpenPhone webhook with test call event...');
    console.log('Test payload:', JSON.stringify(testCallEvent, null, 2));

    // Simulate the webhook processing
    const callData = testCallEvent.object.data.object;
    const callId = callData.id;
    
    // Check if test call already exists
    const { data: existingCall } = await supabase
      .from('openphone_calls')
      .select('id')
      .eq('call_id', callId)
      .single();

    if (existingCall) {
      return NextResponse.json({
        success: true,
        message: 'Test call already exists in database',
        callId,
        action: 'skipped'
      });
    }

    // Insert test call
    const testCallData = {
      call_id: callId,
      caller_number: callData.from,
      receiver_number: callData.to,
      direction: callData.direction === "incoming" ? "inbound" : "outbound",
      duration: callData.duration,
      call_date: callData.completedAt,
      transcript: null,
      classified_as_outcome: "Test Call",
      classified_as_booked: false,
      service_type: "Test",
      pipeline_stage: "Test",
      sentiment: "Neutral",
      is_emergency: false,
      ai_confidence: 0.5,
      ai_summary: "Test call for webhook validation",
      notes: "Generated by debug endpoint",
      pulled_at: new Date().toISOString(),
    };

    const { error: insertError } = await supabase
      .from('openphone_calls')
      .insert(testCallData);

    if (insertError) {
      return NextResponse.json({
        success: false,
        error: 'Failed to insert test call',
        details: insertError.message
      }, { status: 500 });
    }

    // Verify the call was inserted
    const { data: insertedCall } = await supabase
      .from('openphone_calls')
      .select('*')
      .eq('call_id', callId)
      .single();

    return NextResponse.json({
      success: true,
      message: 'Test call successfully processed',
      callId,
      action: 'inserted',
      data: insertedCall
    });

  } catch (error) {
    console.error('OpenPhone webhook test error:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

export async function GET() {
  try {
    const supabase = createServiceRoleClient();
    
    // Get recent calls to show webhook is working
    const { data: recentCalls, error } = await supabase
      .from('openphone_calls')
      .select('call_id, caller_number, direction, duration, call_date, classified_as_booked, ai_confidence')
      .order('call_date', { ascending: false })
      .limit(10);

    if (error) {
      return NextResponse.json({
        success: false,
        error: 'Failed to fetch recent calls',
        details: error.message
      }, { status: 500 });
    }

    // Get call statistics
    const { data: callStats } = await supabase
      .from('openphone_calls')
      .select('direction, classified_as_booked')
      .gte('call_date', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString());

    const stats = {
      totalCalls: callStats?.length || 0,
      inboundCalls: callStats?.filter(c => c.direction === 'inbound').length || 0,
      outboundCalls: callStats?.filter(c => c.direction === 'outbound').length || 0,
      bookedCalls: callStats?.filter(c => c.classified_as_booked === true).length || 0,
      lastCall: recentCalls?.[0]?.call_date || null
    };

    return NextResponse.json({
      success: true,
      message: 'OpenPhone webhook status check',
      recentCalls: recentCalls || [],
      statistics: stats,
      webhookStatus: {
        isWorking: stats.totalCalls > 0,
        lastActivity: stats.lastCall,
        callVolume: stats.totalCalls
      }
    });

  } catch (error) {
    console.error('OpenPhone status check error:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}
